//i = n(0), a = i, s = n(13), c = "1234567890123456", u = e.exports = function(e) {
//                e = e || {}, this.opt = e, this.sessionToken = e.sessionToken, this.version = e.version || "",
//                this.appid = e.appid, this.pf = e.pf || "", this.sandbox = e.sandbox, this.reportFunc = e.report,
//                this.sessionObj = e.sessionObj, this.domain = "https://" + this.opt.cgiDomain || !1,
//                3 == ~~this.sandbox && (this.domain = this.opt.cgiDomain ? this.domain : "https://testing.api.unipay.qq.com"),
//                this.ay = (this.sandbox, "DsCxsLoDx35PpZp9MB9KwI2mSKwe2QNL"), this.requestType = e.requestType || "jsonp",
//                this.requestTask = {};
//            };
const s = require("crypto-js");
const sm = require("sm-crypto");
const c = "1234567890123456";
//const c = "123456789ABCDEF";

const dec = function (cipherText) {
	//console.log({ cipherText });
	cipherText = cipherText.replace(/\_.+/g, "");
	//cipherText = cipherText.replace(/\s/g, "");
	//console.log("replaced:" + cipherText);
	cipherText = s.enc.Hex.parse(cipherText);
	//console.log("hexparsed:" + cipherText);
	cipherText = s.enc.Base64.stringify(cipherText);
	//console.log("base64strigfy:" + cipherText);
	const ay = "DsCxsLoDx35PpZp9MB9KwI2mSKwe2QNL";
	return s.AES.decrypt(cipherText, s.enc.Utf8.parse(ay), {
		iv: s.enc.Utf8.parse(c),
		padding: s.pad.Pkcs7,
		mode: s.mode.CBC,
	}).toString(s.enc.Utf8);
};
const encParams = ["openid", "pf", "out_trade_no"];
const enc = function (allParams, encParams) {
	var n = ["openid=8695274927377426181", "pf=", "out_trade_no=B,PU000000PFLK4"];
	return (
		(n = n.join("&")),
		console.log({ n }),
		{
			encrypt_msg: s.AES.encrypt(
				n,
				s.enc.Utf8.parse("DsCxsLoDx35PpZp9MB9KwI2mSKwe2QNL"),
				{
					padding: s.pad.Pkcs7,
					iv: s.enc.Utf8.parse(c),
					mode: s.mode.CBC,
				}
			).ciphertext.toString(s.enc.Hex),
			key_len: "newkey",
			msg_len: n.length,
			key_time: new Date().getTime(),
		}
	);
};
//console.log(enc());
const cipherText =
	"82517567226B0F3DBF23C1ED08CF28737D724B166E8282AB4C2669B4F0413807427171A17040640A4AD96168869D4A5863123CA8E98D7F1BAF14616814779FF64E5659B3BF1547974754F85BDBB67A1FE67FF28790774231EA1BF0E7240587F54D5C0930E48BFD240888624E6D145C4BA9F5C6F1006E09CCA5939C76F6338FB1DEBEBCDE66F7163321006FAC6709DED3FEAC05961E2A2165FC64923F9B26B7E84698B55DD79D2C25D11E7D348443D0193E16A4D68F117D7C9C5D3D9BD0B1C5A948822D9CB676496FEEB0437BB13C4309CF0B4CDAB6AEC9D1EB7C0E4C10CF420A3CE96700636CC26EE90CCB9FA018E08CECBA7B6910F64F5F0826315F342AD0E36E0C87910B37AAC85D3C901DD8AA5AEAA7CAF28E8D334CC2DA3C8938B008BD14EFD1FD7E36BEE35BD2402AD63556AC443298BB186FD9F3E2FEB0885F5DE8A4FFE88A39A920E94CAB89F27DFBB019976996C3C5675F2E4B36B712C79B4268FA3528423635D4BB8D446BC002659CC316A8954182A6A2A3C63791ED9FD1991C0BAF28DE58AA1C0CA208BAA02E52EBFBCDF52B9CF695904AD199BD0D9E59D68B6AC3FA69F2F24A6AB00CC2FE1E06E995845C1ACBC0E13616D6E396063FDE4134AF84BFFB5B56BDD8A8ED80B366177576269C97AB6A47089DBC0E2E606B5EE26F722589D6860DD9BA7721E757060CECB18E76AB308ECA1A37B05C4D1ECE20AF5C82CD965B780D6E291D6766CC17304ABF9CAEBA1A903C794DB47EA24DBB4547BA2B9619166C9F10754F40BA528C8DB4881499A65F85A220849FDF67927F7C4B57906625090CD88056C451596D664737E805CB2295EB574157A7FC8BD2CB558927642DFC8E861B080B531C3CE7416CEDBEA69993D4E39116D4EC9D8C2C673AC8E8647D50E66D0FBBF21E3D65F498289AD641463C26870334352D7B72238048D53E4825455456BC221EDA144C3DC937906FEF685582F45A2B30B18DDAD5B55E7E09C4C215BED4E645EE6A1EC3CE1AEE34E34B78B2BE23CBD4FBB78E21313CE707144EE060E4AED9AAD06CFF444197761710AA813B329373CDE6B6D4608DB2E87F49446D5C847FDC9565C3B73A720975A6E05C0F181BAB38AECC2784F1FF8FAB25556CA0DB456428906DA05A6544E3CA928EC5B29F6E133D66E3AF05A21C05C28D59A9FD204180C5C52585D293667F72F82D3F7D3BBD84BCAEFB66A73A9AB4A8D3F6449A3B451387EAB7A72288D595AF84E53CB980A9E22F940FC7DAD040B2F4F8A7CAF648336B24B19098087B5595D29CF9A77B85B5A6AACF43BBB3851B4F459DBA7900A429431EEA5886F3585EF0684236C8FDE96419793341011F685EC0051F51AC9DE5A73EB9962A2F9F34560F8B59C39DAF6A1C387F5446577E29B8B3CEE222068302E8C6CEC452F30B26D7D0E47C608A6135E46E8FF66C2FFC59A70F9E689C99BD1C16A72267EB0120646DE867C0B8F057B7A3A187E419CDA9D9CF798630873287F9834445BDBB77BB904E5AFC62ECB43620B8DF780E2C8A4053CF4B9B91EA9B6B817D37431A79F09EDD5BE1BCF68455ACABA6D4FDAA79B2181D830FAF8EE370ED379B14B17CCE930873139DB8BF5906A5A6A6876494E561AB8418923481A5DC7300D5DE770B4EAEE033C6E6695A068DAB5D20E0A66AB1BBBC6F609AF9AB6E3A7DDB63DA781FC798C6FC5A635CE8F34B78251ED391A7106914A2427282032B71C4";
console.log("cipherText-length:" + cipherText.length);
const sandbox = 0;
const ay = (sandbox, "APID8jN115a8pHemP3wdo8d65su943JGe5vl68r4");
console.log({ ay });
//const ayparse = s.enc.Utf8.parse(ay);
//console.log({ ayparse });
const deco = dec(cipherText);
console.log({ deco });
console.log("deco-length:" + deco.length);
//const deco2 = dec(deco);
//console.log({ deco2 });
//console.log("deco-length:" + deco2.length);
//const deco3 = dec(deco2);
//console.log({ deco3 });
//console.log("deco3-length:" + deco3.length);
//const js = JSON.parse(deco);
//console.log({ js });
//console.log(sm.sm4.decrypt(deco, "ddda758af61973ee37679372d52dbb20"));
